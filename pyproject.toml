[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cirquit"
version = "1.0.1"
description = "Quantum circuits, simplified. A developer-first quantum computing platform."
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Cirquit Team", email = "hello@cirquit.io"}
]
maintainers = [
    {name = "Cirquit Team", email = "hello@cirquit.io"}
]
keywords = [
    "quantum",
    "quantum-computing",
    "quantum-circuits",
    "qubits",
    "quantum-algorithms",
    "qaas"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
    "Typing :: Typed",
]

dependencies = [
    "numpy>=1.24.0",
    "scipy>=1.10.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pylint>=2.17.0",
    "flake8>=6.1.0",
    "pre-commit>=3.3.0",
]

docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
]

viz = [
    "matplotlib>=3.7.0",
    "plotly>=5.15.0",
]

performance = [
    "cupy-cuda11x>=12.0.0",
    "numba>=0.57.0",
]

cloud = [
    "requests>=2.31.0",
    "websockets>=11.0.0",
    "python-dotenv>=1.0.0",
]

all = [
    "cirquit[dev,docs,viz,cloud]",
]

[project.urls]
Homepage = "https://cirquit.io"
Documentation = "https://docs.cirquit.io"
Repository = "https://github.com/cirquit/cirquit"
"Bug Tracker" = "https://github.com/cirquit/cirquit/issues"
Discord = "https://discord.gg/cirquit"
Twitter = "https://twitter.com/cirquit_io"
Changelog = "https://github.com/cirquit/cirquit/blob/main/CHANGELOG.md"

[project.scripts]
cirquit = "cirquit.cli:main"

[tool.setuptools]
packages = ["cirquit"]

[tool.setuptools.package-data]
cirquit = ["py.typed", "data/*.json"]

# ===== Black Configuration =====
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# ===== isort Configuration =====
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# ===== pytest Configuration =====
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=cirquit",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
]

# ===== Coverage Configuration =====
[tool.coverage.run]
source = ["cirquit"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

# ===== mypy Configuration =====
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# ===== pylint Configuration =====
[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring
    "R0913",  # Too many arguments
    "R0914",  # Too many local variables
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.design]
max-args = 8
max-attributes = 12

# ===== ruff Configuration (optional alternative to flake8) =====
[tool.ruff]
line-length = 100
target-version = "py311"

select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]

ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

# ===== Bandit Configuration (Security Checks) =====
[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101"]  # Skip assert_used check